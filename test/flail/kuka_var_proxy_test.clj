(ns flail.kuka-var-proxy-test
  (:require [clojure.test :refer :all]
            [flail.kuka-var-proxy :refer :all]
            [gloss.core.formats :refer :all]))

; What happens when the connection drops? Variable reads & writes buffered and then delivered after connection is re-established?
; What if the connection is severed outright (e.g. cable unplugged)?
; What if a badly formatted message is sent to kukavarproxy?
;   - Wrong length for variable name
;   - Wrong format for value
;   - Non-existent variable
; Does the order of the ID values matter?

; Read Request Message Format
; ---------------------------
; 2 bytes Id (uint16)
; 2 bytes for content length (uint16)
; 1 byte for read/write mode (0=Read) (ubyte)
; 2 bytes for the variable name length (uint16)
; N bytes for the variable name to be read (ASCII)
;   (finite-frame :int32 (string :utf-8))

(def good-read (to-byte-buffer [
  0x24 0x32 ; id
  0 0 ; content length
  0 ; reading mode
  0 3 ; name length
  "foo" ; variable name
]))

(def bad-read (to-byte-buffer [
  0x12 0x34 ; id
  0 0 ; content length
  0 ; reading mode
  0 2 ; name length
  "foobar" ; variable name
]))

; Captured from RoboDK "Get Position" command
(def request1
  (to-byte-buffer
    (map unchecked-byte
         [0x00 0x07 0x00 0x0c 0x00 0x00 0x09 0x24 
          0x41 0x58 0x49 0x53 0x5f 0x41 0x43 0x54])))

; Captured from RoboDK "Get Position" command
(def response1
  (to-byte-buffer
    (map unchecked-byte
         [0x00 0x06 0x00 0x8d 0x00 0x00 0x87 0x7b
          0x45 0x36 0x41 0x58 0x49 0x53 0x3a 0x20
          0x41 0x31 0x20 0x31 0x30 0x38 0x2e 0x39
          0x31 0x39 0x33 0x2c 0x20 0x41 0x32 0x20
          0x2d 0x31 0x35 0x32 0x2e 0x31 0x37 0x33
          0x33 0x2c 0x20 0x41 0x33 0x20 0x39 0x30
          0x2e 0x31 0x32 0x33 0x39 0x32 0x2c 0x20
          0x41 0x34 0x20 0x32 0x35 0x38 0x2e 0x31
          0x31 0x36 0x34 0x2c 0x20 0x41 0x35 0x20
          0x34 0x35 0x2e 0x30 0x37 0x34 0x32 0x31
          0x2c 0x20 0x41 0x36 0x20 0x35 0x2e 0x36
          0x38 0x34 0x32 0x30 0x30 0x2c 0x20 0x45
          0x31 0x20 0x30 0x2e 0x30 0x2c 0x20 0x45
          0x32 0x20 0x30 0x2e 0x30 0x2c 0x20 0x45
          0x33 0x20 0x30 0x2e 0x30 0x2c 0x20 0x45
          0x34 0x20 0x30 0x2e 0x30 0x2c 0x20 0x45
          0x35 0x20 0x30 0x2e 0x30 0x2c 0x20 0x45
          0x36 0x20 0x30 0x2e 0x30 0x7d 0x00 0x01
          0x01])))

(deftest test-decode-request
  (testing "Get Position request is decoded correctly"
    (let [fields (decode-request request1)]
      (is (= (:name fields) "$AXIS_ACT"))))
  (testing "Bad read message throws exception"
    (is (thrown? Exception (decode-request bad-read)))))

(deftest test-decode-response
  (testing "Get Position response is decoded correctly"
    (let [fields (decode-response response1)]
      (is (= (:id fields) 6))
      (is (= (:mode fields) :read))
      (is (= (:content-length fields) 141))
      (is (= (:status fields) [0 1 1])))))

